<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- 
	항상 namespace 인터페이스이름과 동일하게 적어야한다.
	id부분도 인터페이스와 같아야함(식별자는 항상 메소드 이름하고 같아야한다)
	mybatis는 parameterclass가아니고 parameterType로 해야한다.
	
	ProductMapper 인터페이스의
		void insertProdut(Product product) 추상메소드와 연관된 SQL구문이다.
		
		출력 : void       -resultType     -없다.
		입력 : Product    -parameterType  - com.sample.vo.Product
 -->
<mapper namespace="com.sample.mapper.ProductMapper">
	<!-- 
		ProductMapper인터페이스의
			int getTotalRows(Criteria criteria) 추상메소드와 연관된 SQL구문이다.
			
			출력 : int      		-		resultType        -int
			입력 : Criteria 				parametertType 	  - com.sample.web.dto.Criteria  
	 -->
	<select id="getTotalRows" parameterType="com.sample.web.dto.Criteria" resultType="int">
		select
			count(*)
		from 
			shop_products
			
		<where>
			<if test="opt != null">
				<choose>
					<when test="opt == 'name' ">
						product_name like '%' || #{keyword} || '%'
					</when>
					<when test="opt =='price' ">
						product_price between 0 and to_number(#{keyword})
					</when>
				</choose>
			</if>
		</where>
	</select>
	<!-- 
			ProductMapper인터페이스의
			int getTotalRows(Criteria criteria) 추상메소드와 연관된 SQL구문이다.
			
			출력 : List<Product>     		-		resultType        -int
			입력 : Criteria 				-	    parametertType 	  - com.sample.web.dto.Criteria
	 -->
	
	
	<select id="getProducts" parameterType="com.sample.web.dto.Criteria" resultType="com.sample.vo.Product">
		select
			product_no			as no,
			product_name		as name,
			product_price		as price,
			product_status		as status,
			product_stock		as stock
			
		from
			(select
				product_no,
				product_name,
				product_price,
				product_status,
				product_stock,
				<choose>
					<when test="sort == 'date' ">
						row_number() over (order by product_no desc) row_num
					</when>
					<when test="sort == 'name' ">
						row_number() over (order by product_name asc) row_num
					</when>
					<when test="sort == 'lowprice' ">
						row_number() over (order by product_price asc) row_num
					</when>
					<when test="sort == 'highprice' ">
						row_number() over (order by product_price desc) row_num
					</when>
				</choose>
			from 
				shop_products
			<where>
				<if test="opt != null">
					<choose>
						<when test="opt == 'name' ">
							product_name like '%' || #{keyword} || '%'
						</when>
						<when test="opt =='price' ">
							product_price between 0 and to_number(#{keyword})
						</when>
					</choose>
				</if>
			</where>)
		where
			row_num between #{begin} and #{end}
			
	</select>
	
	<!-- 
			ProductMapper인터페이스의
			int getTotalRows(Criteria criteria) 추상메소드와 연관된 SQL구문이다.
			
			출력 : int      		-		resultType        - com.sample.vo.Product
			입력 : Criteria 				parametertType 	  - com.sample.web.dto.Criteria
	 -->

	<!--  product_filename 추가 -->
	<insert id="insertProduct" parameterType="com.sample.vo.Product">
		insert into shop_products
		(product_no, product_name, product_description, product_stock, product_price, product_filename, company_no)
		values
		(products_seq.nextval, #{name}, #{description}, #{stock}, #{price}, #{filename}, #{company.no})
	</insert>
	<!-- 
		ProductMapper 인터페이스의
			List<Product> getAllProducts()추상메소드와 연관된 sql구문이다.
			
			출력 : List<Product>	-     resultType      -com.sample.vo.Product
			입력 : 없다.			      parameterType   -없음
	 -->
	<select id ="getAllProducts" resultType="com.sample.vo.Product">
		select
			product_no  			as no,
			product_name			as name,
			product_description 	as description,
			product_stock			as stock,
			product_price			as price,
			product_status			as status,
			product_filename		as filename,
			product_created_date	as createdDate,
			product_updated_date	as updatedDate
			
		from 
			shop_products
		order by
			product_no desc
	
	</select>
		<!-- 
		목록 상세내용
		ProductMapper 인터페이스의
			Product getProductByNo()추상메소드와 연관된 sql구문이다.
			
			출력 : Product      -resultType - com.sample.vo.Product
			입력 : int          -parameterType  -int
	 -->
	 <select id="getProductByNo" parameterType="int" resultType="com.sample.vo.Product">
	  select
			product_no  			as no,
			product_name			as name,
			product_description 	as description,
			product_price			as price,
			product_stock			as stock,
			product_status			as status,
			product_filename		as filename,
			product_created_date	as createdDate,
			product_updated_date	as updatedDate
			
		from 
			shop_products
		where
			product_no = #{value}
	
	 </select>
	 
	 	
	<!-- 
			ProductMapper인터페이스의
				void deleteProducts(@param("noList) List<Integer> noList)추상메소드와 연결된 SQL구문이다
			
			출력 : void      		-		resultType        - 없다
			입력 : List<Integer>  -   parameterType - 추상메소드 @Param("noList")로 지정했기 때문에 설정할 필요없다.
	 -->
		<delete id="deleteProducts">
			delete from
				shop_products
			where
				product_no in
				<foreach item="no" collection="noList" open="(" separator="," close=")">
					#{no}
				</foreach>
		</delete>
	
	

</mapper>